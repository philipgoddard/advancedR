attributes(sum)
is.function(sum)
?is.function
is.primitave(sum)
is.primitive(sum)
objs <- mget(ls("package:base"), inherits = TRUE)
funs <- Filter(is.function, objs)
head(funs)
length(funs)
len(funs)
lapply(funs, length)
ehad(fun)
head(fun)
head(funs)
funs[1]
funs[1][[2]]
funs[1][1]
funs[1][[1]]
funs[1][[2]]
funs[1][[1]][[1]]
funs[[1]]
funs
funs
?args
lappy(funs, args)
lapply(funs, args)
lapply(funs, function(x)length(args(x))
)
head(lapply(funs, function(x)length(args(x))))
head(funs)
args(<<)
args('<<')
args(sum)
sum
lapply(funs, function(x){length(formals(x))})
nFormals <- unlist(lapply(funs, function(x){length(formals(x))}))
head(nFormals)
head(nFormals, 10)
head(nFormals, 100)
table(nFormals)
max(nFormals)
names(max(nFormals))
nFormals <- (lapply(funs, function(x){length(formals(x))}))
max(nFormals)
max(nFormals)[[1]]
max(nFormals)[1]
which(nFormals == max(nFormals))
nFormals
unlist(nFormals)
which(nFormalsUL == max(nFormalsUL))
nFormalsUL <- unlist(nFormals)
which(nFormalsUL == max(nFormalsUL))
table(nFormalsUL)
nFormal[which(nFormalsUL == max(nFormalsUL))]
nFormals[which(nFormalsUL == max(nFormalsUL))]
table(nFormalsUL)
max(nFormalsUL)
nFormals[which(nFormalsUL == max(nFormalsUL))]
nFormals[907]
objs <- mget(ls("package:base"), inherits = TRUE)
funs <- Filter(is.function, objs)
nFormals <- (lapply(funs, function(x){length(formals(x))}))
table(nFormals)
table(unlist(nFormals))
```{r}
f <- function(){
x <- 1
y <- 2
c(x, y)
}
f()
x <- 1
f <- function(){
y <- 2
i <- function(){
z <- 3
c(x, y, z)
}
}
f()
f()
objs <- mget(ls("package:base"), inherits = TRUE)
funs <- Filter(is.function, objs)
head(funs)
head(funs,10)
head(funs,20)
head(funs,50)
?grep
funs(1)
funs[1]
funs[1][1]
names(funs)
names(funs)[1]
head(funs)
funs$^
unlist(funs)
head(unlist(funs))
formals(funs)
?infix
head(names(funs))
infix <- grep(!^[A-Za-z],names(funs) )
infix <- grep(^[A-Za-z],names(funs) )
infix <- grep([^A-Za-z],names(funs) )
infix <- grep(^A-Za-z,names(funs) )
infix <- grep("^A-Za-z",names(funs) )
head(infix)
infix <- grep("[^A-Za-z]",names(funs) )
head(infix)
?agrep
head(funs)
objs <- mget(ls("package:base"), inherits = TRUE)
funs <- Filter(is.function, objs)
infix <- funs[agrep('<-',funs)]
head(infix)
??agrep
??agrep for '<-'
??agrep
?agrep
head(funs)
funs[1]
funs[1]
funs[agrep('<-',1)]
funs[agrep('<-',2)]
funs[agrep('<-',funs)]
funs[agrep('<-',funs)]
funs[agrep('<-',funs)]
objs <- mget(ls("package:base"), inherits = TRUE)
funs <- Filter(is.function, objs)
infix <- funs[agrep('<-',funs)]
head(infix)
length(infix)
length(funs)
names(infix)
funs <- Filter(is.function, objs)
grepl("<-$", names(funs))
grepl("<-", names(funs))
grepl("<-$", names(funs))
grepl("<-", names(funs))
funs[grepl("<-", names(funs))]
names(funs[grepl("<-", names(funs))])
names(funs[grepl("<-$", names(funs))])
?structure
